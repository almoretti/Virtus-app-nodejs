// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  name          String?
  image         String?
  role          Role       @default(CUSTOMER_SERVICE)
  emailVerified DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  technician    Technician?
  bookings      Booking[]  @relation("CreatedBy")
  invitations   UserInvitation[] @relation("InvitedBy")
  apiTokens     ApiToken[] @relation("ApiTokens")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Technician {
  id            String     @id @default(cuid())
  user          User       @relation(fields: [userId], references: [id])
  userId        String     @unique
  color         String     @default("#3B82F6") // Default blue color
  active        Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  bookings      Booking[]
  availability  TechnicianAvailability[]
}

model Customer {
  id            String     @id @default(cuid())
  name          String
  phone         String
  email         String?
  address       String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  bookings      Booking[]
}

model InstallationType {
  id            String     @id @default(cuid())
  name          String     @unique
  description   String?
  duration      Int        @default(120) // Duration in minutes
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  bookings      Booking[]
}

model Booking {
  id                String     @id @default(cuid())
  date              DateTime
  slot              TimeSlot
  status            BookingStatus @default(SCHEDULED)
  notes             String?
  
  customer          Customer   @relation(fields: [customerId], references: [id])
  customerId        String
  
  technician        Technician @relation(fields: [technicianId], references: [id])
  technicianId      String
  
  installationType  InstallationType @relation(fields: [installationTypeId], references: [id])
  installationTypeId String
  
  createdBy         User       @relation("CreatedBy", fields: [createdById], references: [id])
  createdById       String
  
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  
  @@unique([date, slot, technicianId])
}

model TechnicianAvailability {
  id            String     @id @default(cuid())
  technician    Technician @relation(fields: [technicianId], references: [id])
  technicianId  String
  date          DateTime
  available     Boolean    @default(true)
  reason        String?    // For time off reasons
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  
  @@unique([technicianId, date])
}

enum Role {
  ADMIN
  CUSTOMER_SERVICE
  TECHNICIAN
}

enum TimeSlot {
  MORNING    // 10-12
  AFTERNOON  // 13-15
  EVENING    // 16-18
}

enum BookingStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

model UserInvitation {
  id            String    @id @default(cuid())
  email         String    @unique
  role          Role      @default(CUSTOMER_SERVICE)
  token         String    @unique @default(cuid())
  expiresAt     DateTime
  acceptedAt    DateTime?
  createdAt     DateTime  @default(now())
  invitedBy     User      @relation("InvitedBy", fields: [invitedById], references: [id])
  invitedById   String
  
  @@index([token])
  @@index([email])
}

model ApiToken {
  id            String    @id @default(cuid())
  name          String    // User-friendly name for the token
  token         String    @unique // The actual bearer token
  userId        String
  user          User      @relation("ApiTokens", fields: [userId], references: [id], onDelete: Cascade)
  expiresAt     DateTime? // Null means no expiration
  lastUsedAt    DateTime?
  isActive      Boolean   @default(true)
  scopes        String?   // JSON array of allowed scopes/permissions
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([token])
  @@index([userId])
}